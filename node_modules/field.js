var io = require( 'socket.io' )
  , Vector = require( 'sylvester' ).Vector;

function Field() {
  var cells = []
    , pucks = []
    , dim = 1;

  var findEmpty = function() {
    for (var i = 0; i < dim; ++i) {
      for (var j = 0; j < dim; ++j) {
        if (!cells[i]) {
          
          console.log( 'found empty row at: ' + i );
          
          cells[i] = [];
          return { x: i, y: j };
        }
        else if (!cells[i][j]) {
        
          console.log( 'found empty cell at: ' + i + ', ' + j );
          return { x: i, y: j };
        }
      }
    }

    var result = dim;
    ++dim;
    cells[dim] = [];
    console.log( 'expanding grid to ' + dim );

    return { x: result, y: 0 };
  };
  
  var isEmpty = function( i ) {
  
    console.log( 'isEmpty ' + i.e(1) + ' ' + i.e(2) ); 
    if (!cells[ i.e(1) ]) {
      cells[ i.e(1) ] = [];
      return true;
    }
    return !cells[ i.e(1) ][ i.e(2) ];
  };

  this.addCell = function( s ) {

    var pos = findEmpty(); 

    function wrap( iv, mod ) {
      var m = $V( [ iv.e(1) % mod, iv.e(2) % mod ] )
        , x = m.e(1) >= 0 ? m.e(1) : m.e(1) + mod
        , y = m.e(2) >= 0 ? m.e(2) : m.e(2) + mod;

      return Vector.create( [ x, y ] ); 
    }; 

    function floor( v ) { 
      return Vector.create( [ Math.floor( v.e(1) ), Math.floor( v.e(2) ) ] );
    }; 

    function getDirection( pos ) { 
      if (pos.x >= 1000) return $V( [ 1, 0 ] ); 
      if (pos.x <= 0) return $V( [ -1, 0 ] );
      if (pos.y >= 1000) return $V( [ 0, 1 ] );
      return $V( [ 0, -1 ] );
    }; 

    function transfer( data ) {
      
      var dest_index = $V( [ pos.x, pos.y ] )
        , direction = getDirection( data.position ); 
        
      do {
        dest_index = wrap( dest_index.add( direction ), dim );
      } 
      while (isEmpty(dest_index));
      
      direction = direction.multiply( 1000 ); 
      
      data.position = { x: data.position.x - direction.e(1), y: data.position.y - direction.e(2) };
      
      console.log( 'transfer to ' + dest_index.e(1) + ' ' + dest_index.e(2) + ' ' + data.toString() );
      console.log( data.position.x + ' ' + data.position.y );
      
      cells[ dest_index.e(1) ][ dest_index.e(2) ].emit( 'transfer', data );
    }

    s.on( 'disconnect', function() {
      console.log( 'removing cell at' + pos.x + ' ' + pos.y );
      delete cells[ pos.x ][ pos.y ];
    } );

    s.on( 'transfer', transfer );

    console.log( 'adding cell at' + pos.x + ' ' + pos.y );
    
    if (!cells[pos.x]) {
      cells[pos.x] = [];
    }
    cells[ pos.x ][ pos.y ] = s;
  };
};

module.exports = new Field();